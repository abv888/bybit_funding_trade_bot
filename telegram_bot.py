import os
import asyncio
import logging
import json
import datetime
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("telegram_bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–æ—Ç–∞
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = int(os.getenv("TELEGRAM_USER_ID", "0"))
MIN_FUNDING_RATE = float(os.getenv("MIN_FUNDING_RATE", "0.0001"))

class TelegramBotServer:
    def __init__(self, token, user_id=None):
        self.bot = Bot(token=token)
        self.user_id = user_id
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.router = Router()
        self.dp.include_router(self.router)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_handlers()
    
    def _setup_handlers(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
        @self.router.message(Command("start"))
        async def cmd_start(message: Message):
            await self.send_menu(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        @self.router.callback_query()
        async def handle_callback(callback: CallbackQuery):
            try:
                if callback.data == "status":
                    await self.handle_status(callback)
                elif callback.data == "funding":
                    await self.handle_funding(callback)
                elif callback.data == "top":
                    await self.handle_top(callback)
                elif callback.data == "stats":
                    await self.handle_stats(callback)
                elif callback.data == "settings":
                    await self.handle_settings(callback)
                elif callback.data == "emergency_stop":
                    await self.handle_emergency_stop(callback)
                elif callback.data == "refresh":
                    await self.handle_refresh(callback)
                elif callback.data == "menu":
                    await self.handle_menu(callback)
                elif callback.data == "confirm_stop":
                    await self.handle_confirm_stop(callback)
                elif callback.data == "cancel_stop":
                    await self.handle_cancel_stop(callback)
                
                await callback.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /status
        @self.router.message(Command("status"))
        async def cmd_status(message: Message):
            await self.send_status(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /funding
        @self.router.message(Command("funding"))
        async def cmd_funding(message: Message):
            await self.send_funding(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /top
        @self.router.message(Command("top"))
        async def cmd_top(message: Message):
            await self.send_top(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /stats
        @self.router.message(Command("stats"))
        async def cmd_stats(message: Message):
            await self.send_stats(message)
    
    async def send_menu(self, message: Message, edit=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                InlineKeyboardButton(text="üíπ –§–∞–Ω–¥–∏–Ω–≥", callback_data="funding")
            ],
            [
                InlineKeyboardButton(text="üîù –¢–æ–ø —Ä–µ–π—Ç—ã", callback_data="top"),
                InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton(text="‚ùå –°—Ç–æ–ø", callback_data="emergency_stop")
            ]
        ])
        
        menu_text = (
            "ü§ñ <b>–§–∞–Ω–¥–∏–Ω–≥ –ê—Ä–±–∏—Ç—Ä–∞–∂ –ë–æ—Ç</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö Bybit.\n\n"
            "üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> –ò—â—É –ø–∞—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞–º–∏ –ø–æ –º–æ–¥—É–ª—é, "
            "–æ—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–æ –≤—ã–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–Ω–¥–∏–Ω–≥, "
            "–∑–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã.\n\n"
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if edit:
            try:
                await message.edit_text(menu_text, reply_markup=keyboard, parse_mode="HTML")
            except Exception as edit_error:
                if "message is not modified" in str(edit_error):
                    logger.info("–ú–µ–Ω—é –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                else:
                    raise edit_error
        else:
            await message.answer(menu_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def handle_status(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        await self.send_status(callback.message, edit=True)
    
    async def handle_funding(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤"""
        await self.send_funding(callback.message, edit=True)
    
    async def handle_top(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ø —Ä–µ–π—Ç–æ–≤"""
        await self.send_top(callback.message, edit=True)
    
    async def handle_stats(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await self.send_stats(callback.message, edit=True)
    
    async def handle_settings(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await self.send_settings(callback.message, edit=True)

    async def handle_menu(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω—é"""
        await self.send_menu(callback.message, edit=True)
    
    async def handle_emergency_stop(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="confirm_stop"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_stop")
            ]
        ])
        
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?\n"
            "–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã!\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def handle_confirm_stop(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        await callback.message.edit_text(
            "üõë <b>–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù!</b>\n\n"
            "–í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã.\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.",
            parse_mode="HTML"
        )
    
    async def handle_cancel_stop(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        await self.send_menu(callback.message, edit=True)
    
    async def handle_refresh(self, callback: CallbackQuery):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞" in callback.message.text:
                await self.send_status(callback.message, edit=True)
            elif "–ë–ª–∏–∂–∞–π—à–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥ –≤—ã–ø–ª–∞—Ç—ã" in callback.message.text:
                await self.send_funding(callback.message, edit=True)
            elif "–¢–æ–ø —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç—ã" in callback.message.text:
                await self.send_top(callback.message, edit=True)
            elif "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏" in callback.message.text:
                await self.send_stats(callback.message, edit=True)
            elif "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞" in callback.message.text:
                await self.send_settings(callback.message, edit=True)
        except Exception as e:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "message is not modified" in str(e):
                logger.info("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    async def send_status(self, message: Message, edit=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            try:
                with open("bot_status.json", "r", encoding='utf-8') as f:
                    status_data = json.load(f)

                trading_running = status_data.get("trading_bot", {}).get("running", False)
                update_time = status_data.get("timestamp", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                balance = status_data.get("balance", 0)
                active_trades = status_data.get("active_trades", {})
                statistics = status_data.get("statistics", {})

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                try:
                    update_dt = datetime.datetime.fromisoformat(update_time.replace('Z', '+00:00'))
                    update_str = update_dt.strftime("%d.%m.%Y %H:%M:%S")
                except:
                    update_str = update_time

                status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n"
                status_text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_str}\n\n"
                status_text += f"ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if trading_running else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                status_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance:.2f} USDT</b>\n\n"

                if active_trades:
                    status_text += f"üìà <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ({len(active_trades)}):</b>\n\n"
                    for trade_id, trade_data in list(active_trades.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                        side_emoji = "üü¢" if trade_data['side'] == 'Buy' else "üî¥"
                        status_text += (
                            f"{side_emoji} <b>{trade_data['symbol']}</b>\n"
                            f"   üìä {trade_data['side']} {trade_data['size']}\n"
                            f"   üíµ –í—Ö–æ–¥: {trade_data['entry_price']}\n"
                            f"   üìà –§–∞–Ω–¥–∏–Ω–≥: {trade_data.get('funding_rate', 0)*100:.4f}%\n"
                            f"   üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {trade_data.get('expected_funding_profit', 0):.4f} USDT\n\n"
                        )
                    
                    if len(active_trades) > 5:
                        status_text += f"... –∏ –µ—â–µ {len(active_trades) - 5} —Å–¥–µ–ª–æ–∫\n\n"
                else:
                    status_text += "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n\n"

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if statistics:
                    status_text += f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    status_text += f"   üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {statistics.get('total_trades', 0)}\n"
                    status_text += f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {statistics.get('successful_trades', 0)}\n"
                    status_text += f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {statistics.get('success_rate', 0):.1f}%\n"
                    status_text += f"   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {statistics.get('total_pnl', 0):.4f} USDT\n\n"

                status_text += f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                status_text += f"   üíµ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {status_data.get('trade_amount_usdt', 0)} USDT\n"
                status_text += f"   üìä –ú–∏–Ω. —Ñ–∞–Ω–¥–∏–Ω–≥: {status_data.get('min_funding_rate', 0)*100:.4f}%\n"
                status_text += f"   ‚è∞ –°–µ–∫—É–Ω–¥ –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {status_data.get('seconds_before_funding', 0)}\n"
                status_text += f"   üîù –¢–æ–ø –ø–∞—Ä: {status_data.get('top_pairs_count', 0)}\n"

            except (FileNotFoundError, json.JSONDecodeError):
                status_text = (
                    "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
                    "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                    "–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª —Å—Ç–∞—Ç—É—Å."
                )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="menu")]
            ])

            if edit:
                try:
                    await message.edit_text(status_text, reply_markup=keyboard, parse_mode="HTML")
                except Exception as edit_error:
                    if "message is not modified" in str(edit_error):
                        logger.info("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    else:
                        raise edit_error
            else:
                await message.answer(status_text, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
            if edit:
                try:
                    await message.edit_text(error_text)
                except Exception as edit_error:
                    if "message is not modified" not in str(edit_error):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            else:
                await message.answer(error_text)
    
    async def send_funding(self, message: Message, edit=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö"""
        try:
            try:
                with open("funding_rates.json", "r", encoding='utf-8') as f:
                    funding_data = json.load(f)
                
                if funding_data and "top_rates" in funding_data and funding_data["top_rates"]:
                    top_rates = funding_data["top_rates"]
                    update_time = funding_data.get("update_time", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    min_rate_percent = funding_data.get("min_funding_rate_percent", MIN_FUNDING_RATE * 100)
                    total_expected_profit = funding_data.get("total_expected_profit", 0)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    try:
                        update_dt = datetime.datetime.fromisoformat(update_time.replace('Z', '+00:00'))
                        update_str = update_dt.strftime("%d.%m.%Y %H:%M:%S")
                    except:
                        update_str = update_time
                    
                    response = f"üíπ <b>–ë–ª–∏–∂–∞–π—à–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥ –≤—ã–ø–ª–∞—Ç—ã</b>\n"
                    response += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_str}\n"
                    response += f"üìä –ú–∏–Ω. —Ä–µ–π—Ç: {min_rate_percent:.5f}%\n"
                    response += f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {total_expected_profit:.4f} USDT\n\n"
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤—ã–ø–ª–∞—Ç—ã
                    available_rates = [rate for rate in top_rates if rate.get("seconds_until", 0) > 0]
                    available_rates.sort(key=lambda x: x.get("seconds_until", float('inf')))
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    for i, rate in enumerate(available_rates[:10], 1):
                        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        direction_emoji = "üî¥" if rate["rate"] > 0 else "üü¢"
                        position_emoji = "üìâ SHORT" if rate["rate"] > 0 else "üìà LONG"
                        
                        response += (
                            f"{direction_emoji} <b>{i}. {rate['symbol']}</b>\n"
                            f"   üíπ –†–µ–π—Ç: {rate['rate_percent']:+.5f}% ({rate['abs_rate_percent']:.5f}%)\n"
                            f"   {position_emoji} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã\n"
                            f"   ‚è∞ –î–æ –≤—ã–ø–ª–∞—Ç—ã: {rate['time_until']}\n"
                            f"   üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {rate['expected_profit_usdt']:.4f} USDT\n\n"
                        )
                    
                    if len(available_rates) == 0:
                        response += "‚è∞ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
                    elif len(top_rates) > 10:
                        response += f"... –∏ –µ—â–µ {len(top_rates) - 10} –ø–∞—Ä\n"
                    
                else:
                    response = "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞."
                    
            except (FileNotFoundError, json.JSONDecodeError):
                response = "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω."

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="menu")]
            ])

            if edit:
                try:
                    await message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
                except Exception as edit_error:
                    if "message is not modified" in str(edit_error):
                        logger.info("–§–∞–Ω–¥–∏–Ω–≥ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    else:
                        raise edit_error
            else:
                await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤"
            if edit:
                try:
                    await message.edit_text(error_text)
                except Exception as edit_error:
                    if "message is not modified" not in str(edit_error):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            else:
                await message.answer(error_text)
    
    async def send_top(self, message: Message, edit=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤"""
        try:
            try:
                with open("funding_rates.json", "r", encoding='utf-8') as f:
                    funding_data = json.load(f)
                
                if funding_data and "top_rates" in funding_data and funding_data["top_rates"]:
                    top_rates = funding_data["top_rates"]
                    update_time = funding_data.get("update_time", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    try:
                        update_dt = datetime.datetime.fromisoformat(update_time.replace('Z', '+00:00'))
                        update_str = update_dt.strftime("%d.%m.%Y %H:%M:%S")
                    except:
                        update_str = update_time
                    
                    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
                    positive_rates = [r for r in top_rates if r.get("rate", 0) > 0]
                    negative_rates = [r for r in top_rates if r.get("rate", 0) < 0]
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                    positive_rates.sort(key=lambda x: x.get("abs_rate", 0), reverse=True)
                    negative_rates.sort(key=lambda x: x.get("abs_rate", 0), reverse=True)
                    
                    response = f"üîù <b>–¢–æ–ø —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç—ã</b>\n"
                    response += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_str}\n\n"
                    
                    # –¢–æ–ø –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ (–ª–æ–Ω–≥–∏—Å—Ç—ã –ø–ª–∞—Ç—è—Ç —à–æ—Ä—Ç–∏—Å—Ç–∞–º)
                    response += "üî¥ <b>–¢–û–ü –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï</b> (–ª–æ–Ω–≥–∏—Å—Ç—ã –ø–ª–∞—Ç—è—Ç —à–æ—Ä—Ç–∏—Å—Ç–∞–º):\n"
                    for i, rate in enumerate(positive_rates[:5], 1):
                        response += (
                            f"{i}. <b>{rate['symbol']}</b>\n"
                            f"   üíπ –†–µ–π—Ç: +{rate['rate_percent']:.5f}%\n"
                            f"   üìâ –û—Ç–∫—Ä—ã–≤–∞—Ç—å: SHORT\n"
                            f"   ‚è∞ –î–æ –≤—ã–ø–ª–∞—Ç—ã: {rate['time_until']}\n"
                            f"   üí∞ –ü—Ä–∏–±—ã–ª—å: {rate['expected_profit_usdt']:.4f} USDT\n\n"
                        )
                    
                    # –¢–æ–ø –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ (—à–æ—Ä—Ç–∏—Å—Ç—ã –ø–ª–∞—Ç—è—Ç –ª–æ–Ω–≥–∏—Å—Ç–∞–º)
                    response += "üü¢ <b>–¢–û–ü –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï</b> (—à–æ—Ä—Ç–∏—Å—Ç—ã –ø–ª–∞—Ç—è—Ç –ª–æ–Ω–≥–∏—Å—Ç–∞–º):\n"
                    for i, rate in enumerate(negative_rates[:5], 1):
                        response += (
                            f"{i}. <b>{rate['symbol']}</b>\n"
                            f"   üíπ –†–µ–π—Ç: {rate['rate_percent']:.5f}%\n"
                            f"   üìà –û—Ç–∫—Ä—ã–≤–∞—Ç—å: LONG\n"
                            f"   ‚è∞ –î–æ –≤—ã–ø–ª–∞—Ç—ã: {rate['time_until']}\n"
                            f"   üí∞ –ü—Ä–∏–±—ã–ª—å: {rate['expected_profit_usdt']:.4f} USDT\n\n"
                        )
                else:
                    response = "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞."
                    
            except (FileNotFoundError, json.JSONDecodeError):
                response = "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="menu")]
            ])

            if edit:
                try:
                    await message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
                except Exception as edit_error:
                    if "message is not modified" in str(edit_error):
                        logger.info("–¢–æ–ø —Ä–µ–π—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    else:
                        raise edit_error
            else:
                await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–ø —Ä–µ–π—Ç–æ–≤: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø —Ä–µ–π—Ç–æ–≤"
            if edit:
                try:
                    await message.edit_text(error_text)
                except Exception as edit_error:
                    if "message is not modified" not in str(edit_error):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            else:
                await message.answer(error_text)
    
    async def send_stats(self, message: Message, edit=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            try:
                with open("bot_status.json", "r", encoding='utf-8') as f:
                    status_data = json.load(f)

                statistics = status_data.get("statistics", {})
                balance = status_data.get("balance", 0)
                
                response = f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
                
                if statistics:
                    total_trades = statistics.get("total_trades", 0)
                    successful_trades = statistics.get("successful_trades", 0)
                    success_rate = statistics.get("success_rate", 0)
                    total_pnl = statistics.get("total_pnl", 0)
                    
                    response += f"üéØ <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {total_trades}\n"
                    response += f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> {successful_trades}\n"
                    response += f"‚ùå <b>–£–±—ã—Ç–æ—á–Ω—ã—Ö:</b> {total_trades - successful_trades}\n"
                    response += f"üìä <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {success_rate:.1f}%\n\n"
                    
                    response += f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {balance:.2f} USDT\n"
                    response += f"üí∏ <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {total_pnl:+.4f} USDT\n"
                    
                    if total_trades > 0:
                        avg_profit = total_pnl / total_trades
                        response += f"üìä <b>–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:</b> {avg_profit:+.4f} USDT\n"
                    
                    # –¶–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
                    if total_pnl > 0:
                        response += "\nüü¢ <b>–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è!</b>"
                    elif total_pnl < 0:
                        response += "\nüî¥ <b>–¢–æ—Ä–≥–æ–≤–ª—è —É–±—ã—Ç–æ—á–Ω–∞—è</b>"
                    else:
                        response += "\nüü° <b>–¢–æ—Ä–≥–æ–≤–ª—è –≤ –Ω—É–ª–µ</b>"
                else:
                    response += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."

            except (FileNotFoundError, json.JSONDecodeError):
                response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω."

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="menu")]
            ])

            if edit:
                try:
                    await message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
                except Exception as edit_error:
                    if "message is not modified" in str(edit_error):
                        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    else:
                        raise edit_error
            else:
                await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            if edit:
                try:
                    await message.edit_text(error_text)
                except Exception as edit_error:
                    if "message is not modified" not in str(edit_error):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            else:
                await message.answer(error_text)
    
    async def send_settings(self, message: Message, edit=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            try:
                with open("bot_status.json", "r", encoding='utf-8') as f:
                    status_data = json.load(f)

                response = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
                response += f"üíµ <b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:</b> {status_data.get('trade_amount_usdt', 0)} USDT\n"
                response += f"üìä <b>–ú–∏–Ω. —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç:</b> {status_data.get('min_funding_rate', 0)*100:.4f}%\n"
                response += f"‚è∞ <b>–°–µ–∫—É–Ω–¥ –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:</b> {status_data.get('seconds_before_funding', 0)}\n"
                response += f"üîù <b>–¢–æ–ø –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {status_data.get('top_pairs_count', 0)}\n\n"
                response += f"üìà <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>\n"
                response += f"‚Ä¢ –ò—â–µ–º {status_data.get('top_pairs_count', 20)} –ø–∞—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–º –ø–æ –º–æ–¥—É–ª—é\n"
                response += f"‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞ {status_data.get('seconds_before_funding', 10)} —Å–µ–∫ –¥–æ –≤—ã–ø–ª–∞—Ç—ã\n"
                response += f"‚Ä¢ –ï—Å–ª–∏ —Ä–µ–π—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ‚Üí SHORT (–ø–æ–ª—É—á–∞–µ–º –æ—Ç –ª–æ–Ω–≥–∏—Å—Ç–æ–≤)\n"
                response += f"‚Ä¢ –ï—Å–ª–∏ —Ä–µ–π—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ‚Üí LONG (–ø–æ–ª—É—á–∞–µ–º –æ—Ç —à–æ—Ä—Ç–∏—Å—Ç–æ–≤)\n"
                response += f"‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞\n\n"
                response += f"‚ö†Ô∏è <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ .env —Ñ–∞–π–ª–µ</i>"

            except (FileNotFoundError, json.JSONDecodeError):
                response = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω."

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="menu")]
            ])

            if edit:
                try:
                    await message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
                except Exception as edit_error:
                    if "message is not modified" in str(edit_error):
                        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    else:
                        raise edit_error
            else:
                await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            if edit:
                try:
                    await message.edit_text(error_text)
                except Exception as edit_error:
                    if "message is not modified" not in str(edit_error):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            else:
                await message.answer(error_text)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot, skip_updates=True)
    
    async def save_status(self, running=True):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            status = {
                "telegram_bot": {
                    "running": running,
                    "start_time": datetime.datetime.now().isoformat() if running else None
                },
                "timestamp": datetime.datetime.now().isoformat()
            }
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            try:
                if os.path.exists("bot_status.json"):
                    with open("bot_status.json", "r", encoding='utf-8') as f:
                        existing_status = json.load(f)
                    
                    existing_status["telegram_bot"] = status["telegram_bot"]
                    existing_status["timestamp"] = status["timestamp"]
                    
                    with open("bot_status.json", "w", encoding='utf-8') as f:
                        json.dump(existing_status, f, indent=4, ensure_ascii=False)
                else:
                    with open("bot_status.json", "w", encoding='utf-8') as f:
                        json.dump(status, f, indent=4, ensure_ascii=False)
                        
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å Telegram –±–æ—Ç–∞ (running={running})")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not TELEGRAM_BOT_TOKEN:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
        bot_server = TelegramBotServer(TELEGRAM_BOT_TOKEN, TELEGRAM_USER_ID)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞
        await bot_server.save_status(running=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if TELEGRAM_USER_ID:
            try:
                await bot_server.bot.send_message(
                    chat_id=TELEGRAM_USER_ID,
                    text="ü§ñ <b>Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                         "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
                         "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
                         "üíπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω",
                    parse_mode="HTML"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TELEGRAM_USER_ID}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot_server.start()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {e}")

if __name__ == "__main__":
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    import signal
    import sys
    
    def signal_handler(sig, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        asyncio.create_task(shutdown())
    
    async def shutdown():
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    if sys.platform != 'win32':  # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Windows
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())