import os
import asyncio
import datetime
import json
import logging
from decimal import Decimal
from typing import Dict, List, Optional, Tuple
import signal
import sys

import pandas as pd
from dotenv import load_dotenv

from bybit_client import BybitClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("trading_bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = int(os.getenv("TELEGRAM_USER_ID", "0"))
TRADE_AMOUNT_USDT = float(os.getenv("TRADE_AMOUNT_USDT", "10"))
MIN_FUNDING_RATE = float(os.getenv("MIN_FUNDING_RATE", "0.0001"))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (0.01%)
SECONDS_BEFORE_FUNDING = int(os.getenv("SECONDS_BEFORE_FUNDING", "10"))  # –ó–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–æ –≤—ã–ø–ª–∞—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
TOP_PAIRS_COUNT = int(os.getenv("TOP_PAIRS_COUNT", "20"))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –ø–∞—Ä –ø–æ –º–æ–¥—É–ª—é —Ä–µ–π—Ç–∞
SECONDS_AFTER_FUNDING_TO_CLOSE = int(os.getenv("SECONDS_AFTER_FUNDING_TO_CLOSE", "30"))  # –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å

# –ü–µ—á–∞—Ç–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (API –∫–ª—é—á–∏ —Å–∫—Ä—ã—Ç—ã)
logger.info(f"API –∫–ª—é—á Bybit: {BYBIT_API_KEY[:5]}... (—Å–∫—Ä—ã—Ç)")
logger.info(f"–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: {TELEGRAM_BOT_TOKEN[:5]}... (—Å–∫—Ä—ã—Ç)")
logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram: {TELEGRAM_USER_ID}")

class TradingBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bybit = BybitClient(
            api_key=BYBIT_API_KEY,
            api_secret=BYBIT_API_SECRET,
            testnet=False
        )
        
        self.balance = 0.0
        self.active_trades = {}
        self.funding_schedule = {}
        self.should_run = True
        self.telegram_bot = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.successful_trades = 0
        self.total_pnl = 0.0
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def init_telegram_notifications(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if TELEGRAM_BOT_TOKEN and TELEGRAM_USER_ID:
            try:
                from aiogram import Bot
                self.telegram_bot = Bot(token=TELEGRAM_BOT_TOKEN)
                await self.send_telegram_message("üöÄ –§–∞–Ω–¥–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
                logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
    
    async def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if self.telegram_bot and TELEGRAM_USER_ID:
            try:
                await self.telegram_bot.send_message(chat_id=TELEGRAM_USER_ID, text=message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def update_balance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ USDT"""
        try:
            self.balance = await self.bybit.get_wallet_balance("USDT")
            self.save_status()
            return self.balance
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return self.balance
    
    async def get_funding_rates(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤"""
        try:
            funding_df = await self.bybit.get_funding_rates()
            
            if not funding_df.empty:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                self.funding_schedule = {
                    row["symbol"]: {
                        "nextFundingTime": row["nextFundingTime"],
                        "predictedRate": row["predictedRate"],
                        "timestamp": row["timestamp"]
                    } 
                    for _, row in funding_df.iterrows()
                }
                
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥ –≤—ã–ø–ª–∞—Ç –¥–ª—è {len(funding_df)} –ø–∞—Ä")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                await self.save_funding_rates(funding_df)
                
            return funding_df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤: {e}")
            return pd.DataFrame()
    
    def save_status(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞
            status_data = {
                "trading_bot": {
                    "running": True,
                    "start_time": datetime.datetime.now().isoformat()
                },
                "balance": self.balance,
                "active_trades": {k: self.serialize_trade_data(v) for k, v in self.active_trades.items()},
                "min_funding_rate": MIN_FUNDING_RATE,
                "trade_amount_usdt": TRADE_AMOUNT_USDT,
                "seconds_before_funding": SECONDS_BEFORE_FUNDING,
                "top_pairs_count": TOP_PAIRS_COUNT,
                "statistics": {
                    "total_trades": self.total_trades,
                    "successful_trades": self.successful_trades,
                    "success_rate": (self.successful_trades / max(self.total_trades, 1)) * 100,
                    "total_pnl": self.total_pnl
                },
                "timestamp": datetime.datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open("bot_status.json", "w", encoding='utf-8') as f:
                json.dump(status_data, f, indent=4, default=self.json_serial, ensure_ascii=False)
            
            logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
    
    async def save_funding_rates(self, funding_df: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö –≤ —Ñ–∞–π–ª"""
        try:
            if funding_df.empty:
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞
            funding_df["abs_rate"] = funding_df["predictedRate"].abs()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
            filtered_df = funding_df[funding_df["abs_rate"] >= MIN_FUNDING_RATE]
            
            if filtered_df.empty:
                logger.info(f"–ù–µ—Ç –ø–∞—Ä —Å —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–º >= {MIN_FUNDING_RATE}")
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                funding_data = {
                    "top_rates": [],
                    "update_time": datetime.datetime.now().isoformat(),
                    "total_pairs": len(funding_df),
                    "filtered_pairs": 0,
                    "min_funding_rate": MIN_FUNDING_RATE,
                    "min_funding_rate_percent": MIN_FUNDING_RATE * 100
                }
                
                with open("funding_rates.json", "w", encoding='utf-8') as f:
                    json.dump(funding_data, f, indent=4, default=self.json_serial, ensure_ascii=False)
                
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤—ã–ø–ª–∞—Ç—ã
            current_time = datetime.datetime.now().timestamp()
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞ (–±–µ—Ä–µ–º –¢–û–ü-20 –ø–æ –º–æ–¥—É–ª—é)
            top_pairs_df = filtered_df.nlargest(TOP_PAIRS_COUNT, 'abs_rate')
            
            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø —Ä–µ–π—Ç–∞—Ö
            top_rates = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–ø–æ–≤—ã–º –ø–∞—Ä–∞–º
            for _, row in top_pairs_df.iterrows():
                symbol = row["symbol"]
                next_funding_time = row["nextFundingTime"]
                predicted_rate = row["predictedRate"]
                abs_rate = row["abs_rate"]
                time_until = next_funding_time - current_time
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–æ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
                if time_until > 0:
                    hours, remainder = divmod(time_until, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    time_until_str = f"{int(hours)}—á {int(minutes)}–º {int(seconds)}—Å"
                else:
                    time_until_str = "–ü—Ä–æ—à–ª–æ"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞
                direction = "positive" if predicted_rate > 0 else "negative"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
                position_to_open = "SHORT" if predicted_rate > 0 else "LONG"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                top_rates.append({
                    "symbol": symbol,
                    "rate": float(predicted_rate),
                    "rate_percent": float(predicted_rate) * 100,  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                    "abs_rate": float(abs_rate),
                    "abs_rate_percent": float(abs_rate) * 100,  # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                    "time_until": time_until_str,
                    "time": row["timestamp"].strftime("%Y-%m-%d %H:%M:%S"),
                    "next_funding_time": next_funding_time,
                    "seconds_until": time_until,
                    "direction": direction,
                    "position_to_open": position_to_open,
                    "expected_profit_usdt": float(abs_rate) * TRADE_AMOUNT_USDT  # –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –≤ USDT
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø —Ä–µ–π—Ç—ã –≤ —Ñ–∞–π–ª
            funding_data = {
                "top_rates": top_rates,
                "update_time": datetime.datetime.now().isoformat(),
                "total_pairs": len(funding_df),
                "filtered_pairs": len(filtered_df),
                "top_pairs_count": len(top_rates),
                "min_funding_rate": MIN_FUNDING_RATE,
                "min_funding_rate_percent": MIN_FUNDING_RATE * 100,
                "trade_amount_usdt": TRADE_AMOUNT_USDT,
                "total_expected_profit": sum(rate["expected_profit_usdt"] for rate in top_rates)
            }
            
            with open("funding_rates.json", "w", encoding='utf-8') as f:
                json.dump(funding_data, f, indent=4, default=self.json_serial, ensure_ascii=False)
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(top_rates)} —Ç–æ–ø–æ–≤—ã—Ö –ø–∞—Ä –≤ funding_rates.json")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö: {e}")
    
    @staticmethod
    def json_serial(obj):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ datetime –≤ JSON"""
        if isinstance(obj, (datetime.datetime, datetime.date)):
            return obj.isoformat()
        raise TypeError(f"Type {type(obj)} not serializable")
    
    @staticmethod
    def serialize_trade_data(trade_data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON"""
        serialized = dict(trade_data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
        if "entry_time" in serialized and isinstance(serialized["entry_time"], datetime.datetime):
            serialized["entry_time"] = serialized["entry_time"].isoformat()
            
        return serialized
    
    async def open_position(self, symbol: str, side: str, size: float, funding_rate: float) -> Optional[str]:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await self.bybit.get_ticker(symbol)
            if not ticker:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –¥–ª—è {symbol}")
                return None
                
            price = float(ticker["lastPrice"])
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = await self.bybit.place_market_order(symbol, side, size)
            
            if order:
                order_id = order["orderId"]
                self.active_trades[order_id] = {
                    "symbol": symbol,
                    "side": side,
                    "size": size,
                    "entry_price": price,
                    "entry_time": datetime.datetime.now(),
                    "funding_rate": funding_rate,
                    "expected_funding_profit": abs(funding_rate) * price * size,
                    "funding_collected": False,
                    "closed": False
                }
                
                logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol} {side} {size} –ø–æ —Ü–µ–Ω–µ {price}")
                logger.info(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {abs(funding_rate) * price * size:.4f} USDT")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                await self.send_telegram_message(
                    f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è:\n"
                    f"üìà {symbol} {side} {size}\n"
                    f"üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {price}\n"
                    f"üìä –§–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç: {funding_rate*100:.4f}%\n"
                    f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {abs(funding_rate) * price * size:.4f} USDT"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.save_status()
                
                return order_id
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {symbol}")
                return None
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return None
    
    async def close_position(self, order_id: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if order_id not in self.active_trades:
                logger.error(f"–°–¥–µ–ª–∫–∞ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                return False
                
            trade_data = self.active_trades[order_id]
            symbol = trade_data["symbol"]
            side = trade_data["side"]
            size = trade_data["size"]
            entry_price = trade_data["entry_price"]
            
            # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = "Sell" if side == "Buy" else "Buy"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await self.bybit.get_ticker(symbol)
            if not ticker:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –¥–ª—è {symbol} –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
                return False
                
            exit_price = float(ticker["lastPrice"])
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            order = await self.bybit.place_market_order(symbol, close_side, size, reduce_only=True)
            
            if order:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                if side == "Buy":  # –ë—ã–ª –ª–æ–Ω–≥, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–¥–∞–µ–º
                    price_pnl = (exit_price - entry_price) * size
                else:  # –ë—ã–ª —à–æ—Ä—Ç, —Ç–µ–ø–µ—Ä—å –ø–æ–∫—É–ø–∞–µ–º
                    price_pnl = (entry_price - exit_price) * size
                
                # –ü—Ä–∏–±—ã–ª—å –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (—É–∂–µ —Å–æ–±—Ä–∞–Ω–∞)
                funding_pnl = trade_data.get("expected_funding_profit", 0)
                
                total_pnl = price_pnl + funding_pnl
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.total_trades += 1
                if total_pnl > 0:
                    self.successful_trades += 1
                self.total_pnl += total_pnl
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–¥–µ–ª–∫—É –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é
                trade_data["closed"] = True
                trade_data["exit_price"] = exit_price
                trade_data["exit_time"] = datetime.datetime.now()
                trade_data["price_pnl"] = price_pnl
                trade_data["total_pnl"] = total_pnl
                
                logger.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {symbol} {close_side} {size} –ø–æ —Ü–µ–Ω–µ {exit_price}")
                logger.info(f"üí∞ –ü—Ä–∏–±—ã–ª—å –æ—Ç —Ü–µ–Ω—ã: {price_pnl:.4f} USDT")
                logger.info(f"üí∞ –ü—Ä–∏–±—ã–ª—å –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {funding_pnl:.4f} USDT")
                logger.info(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_pnl:.4f} USDT")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                await self.send_telegram_message(
                    f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è:\n"
                    f"üìà {symbol} {close_side} {size}\n"
                    f"üíµ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {exit_price}\n"
                    f"üìä –ü—Ä–∏–±—ã–ª—å –æ—Ç —Ü–µ–Ω—ã: {price_pnl:.4f} USDT\n"
                    f"üí∞ –ü—Ä–∏–±—ã–ª—å –æ—Ç —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {funding_pnl:.4f} USDT\n"
                    f"üéØ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_pnl:.4f} USDT"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                await self.update_balance()
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                del self.active_trades[order_id]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.save_status()
                
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {symbol}")
                return False
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {order_id}: {e}")
            return False
    
    async def monitor_funding_rates(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤")
        
        while self.should_run:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö
                funding_df = await self.get_funding_rates()
                
                if not funding_df.empty:
                    current_time = datetime.datetime.now().timestamp()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞
                    funding_df["abs_rate"] = funding_df["predictedRate"].abs()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
                    filtered_df = funding_df[funding_df["abs_rate"] >= MIN_FUNDING_RATE]
                    
                    if not filtered_df.empty:
                        # –ë–µ—Ä–µ–º –¢–û–ü-20 –ø–∞—Ä –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞
                        top_pairs_df = filtered_df.nlargest(TOP_PAIRS_COUNT, 'abs_rate')
                        
                        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
                        for _, row in top_pairs_df.iterrows():
                            symbol = row["symbol"]
                            next_funding_time = row["nextFundingTime"]
                            predicted_rate = row["predictedRate"]
                            abs_rate = row["abs_rate"]
                            time_until = next_funding_time - current_time
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                            if 0 < time_until <= SECONDS_BEFORE_FUNDING:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã)
                                side = "Sell" if predicted_rate > 0 else "Buy"
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
                                symbol_active = any(
                                    trade_data["symbol"] == symbol and not trade_data.get("closed", False)
                                    for trade_data in self.active_trades.values()
                                )
                                    
                                if not symbol_active:
                                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                                    size = await self.bybit.calculate_position_size(symbol, TRADE_AMOUNT_USDT)
                                    
                                    if size > 0:
                                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                                        order_id = await self.open_position(symbol, side, size, predicted_rate)
                                        
                                        if order_id:
                                            logger.info(
                                                f"üéØ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–¥ —Ñ–∞–Ω–¥–∏–Ω–≥–æ–º: {symbol} {side} "
                                                f"(—Ñ–∞–Ω–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ {time_until:.1f} —Å–µ–∫, "
                                                f"–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–π—Ç: {predicted_rate:.6f})"
                                            )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                        for order_id, trade_data in list(self.active_trades.items()):
                            if trade_data.get("closed", False):
                                continue
                                
                            symbol = trade_data["symbol"]
                            
                            # –ò—â–µ–º —Å–∏–º–≤–æ–ª –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω–¥–∏–Ω–≥–∞
                            symbol_data = funding_df[funding_df["symbol"] == symbol]
                            
                            if not symbol_data.empty:
                                next_funding_time = symbol_data.iloc[0]["nextFundingTime"]
                                time_until = next_funding_time - current_time
                                
                                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                                if time_until < -SECONDS_AFTER_FUNDING_TO_CLOSE:
                                    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Å–æ–±—Ä–∞–Ω
                                    trade_data["funding_collected"] = True
                                    
                                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                                    success = await self.close_position(order_id)
                                    
                                    if success:
                                        logger.info(f"üîí –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                await self.update_balance()
                
                # –°–ø–∏–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤: {e}")
                await asyncio.sleep(30)
    
    async def emergency_close_all_positions(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        logger.warning("‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π...")
        
        for order_id in list(self.active_trades.keys()):
            try:
                await self.close_position(order_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {order_id}: {e}")
        
        await self.send_telegram_message("‚ö†Ô∏è –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã!")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            self.should_run = False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ –Ω–æ–≤–æ–º event loop
            try:
                asyncio.create_task(self.emergency_close_all_positions())
            except:
                pass
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.setup_signal_handlers()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.init_telegram_notifications()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            await self.update_balance()
            logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.balance} USDT")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä
            symbols = await self.bybit.get_all_perpetual_symbols()
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(symbols)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç—ã
            funding_df = await self.get_funding_rates()
            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(funding_df)} –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–∞—Ö")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª
            self.save_status()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç–æ–≤
            await self.monitor_funding_rates()
            
        except asyncio.CancelledError:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            self.should_run = False
            await self.emergency_close_all_positions()
            raise
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            await self.send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            self.should_run = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if not BYBIT_API_KEY or not BYBIT_API_SECRET:
            logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã API –∫–ª—é—á–∏ Bybit. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
            return 1
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∞–Ω–¥–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂ –±–æ—Ç–∞...")
        logger.info(f"üíµ –°—É–º–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {TRADE_AMOUNT_USDT} USDT")
        logger.info(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∞–Ω–¥–∏–Ω–≥ —Ä–µ–π—Ç: {MIN_FUNDING_RATE*100:.4f}%")
        logger.info(f"‚è∞ –°–µ–∫—É–Ω–¥ –¥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –≤—Ö–æ–¥–∞: {SECONDS_BEFORE_FUNDING}")
        logger.info(f"üîù –¢–æ–ø –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {TOP_PAIRS_COUNT}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = TradingBot()
        await bot.start()
        
        return 0
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))